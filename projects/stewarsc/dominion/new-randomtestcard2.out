Testing Village.
RANDOM TESTS.
TEST FAILED: deckCount not equal.
Game state of failed test:
handCount: 474
deckCount: 197
discardCount: 198
playedCardCount: 434
numBuys: 69
numActions: 4
End of failed test game state.

TEST FAILED: handCount not equal.
Game state of failed test:
handCount: 182
deckCount: -1
discardCount: 0
playedCardCount: 428
numBuys: 7
numActions: 40
End of failed test game state.

TEST(S) FAILED
Lines executed:100.00% of 5
No branches
No calls

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 7232336 returned 100% blocks executed 100%
  7232336:    8:int compare(const void* a, const void* b) {
  7232336:    8-block  0
  7232336:    9:  if (*(int*)a > *(int*)b)
  7232336:    9-block  0
branch  0 taken 3538601 (fallthrough)
branch  1 taken 3693735
  3538601:   10:    return 1;
  3538601:   10-block  0
unconditional  0 taken 3538601
  3693735:   11:  if (*(int*)a < *(int*)b)
  3693735:   11-block  0
branch  0 taken 1161135 (fallthrough)
branch  1 taken 2532600
  1161135:   12:    return -1;
  1161135:   12-block  0
unconditional  0 taken 1161135
  2532600:   13:  return 0;
  2532600:   13-block  0
unconditional  0 taken 2532600
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    $$$$$:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    $$$$$:   44-block  0
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
    $$$$$:   48-block  0
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
    $$$$$:   57-block  0
unconditional  0 never executed
    $$$$$:   57-block  1
unconditional  1 never executed
    $$$$$:   57-block  2
branch  2 never executed
branch  3 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
    $$$$$:   59-block  0
unconditional  0 never executed
    $$$$$:   59-block  1
unconditional  1 never executed
    $$$$$:   59-block  2
branch  2 never executed
branch  3 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
    $$$$$:   61-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   61-block  1
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
    $$$$$:   73-block  0
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
    $$$$$:   75-block  0
unconditional  0 never executed
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
unconditional  0 never executed
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
unconditional  0 never executed
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
    $$$$$:   87-block  0
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
    $$$$$:   91-block  0
unconditional  0 never executed
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
unconditional  0 never executed
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
    $$$$$:  106-block  0
unconditional  0 never executed
    $$$$$:  106-block  1
unconditional  1 never executed
    $$$$$:  106-block  2
branch  2 never executed
branch  3 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    $$$$$:  108-block  0
unconditional  0 never executed
    $$$$$:  108-block  1
unconditional  1 never executed
    $$$$$:  108-block  2
branch  2 never executed
branch  3 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
    $$$$$:  110-block  0
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  113-block  1
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    $$$$$:  115-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  115-block  1
unconditional  2 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
    $$$$$:  116-block  0
unconditional  0 never executed
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
unconditional  0 never executed
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
    $$$$$:  122-block  0
unconditional  0 never executed
        -:  123:		}
    #####:  124:	      break;
    $$$$$:  124-block  0
unconditional  0 never executed
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
    $$$$$:  138-block  0
unconditional  0 never executed
    $$$$$:  138-block  1
unconditional  1 never executed
    $$$$$:  138-block  2
branch  2 never executed
branch  3 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
    $$$$$:  141-block  0
unconditional  0 never executed
    $$$$$:  141-block  1
unconditional  1 never executed
    $$$$$:  141-block  2
branch  2 never executed
branch  3 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
    $$$$$:  146-block  0
unconditional  0 never executed
    $$$$$:  146-block  1
unconditional  1 never executed
    $$$$$:  146-block  2
branch  2 never executed
branch  3 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
    $$$$$:  154-block  0
unconditional  0 never executed
    $$$$$:  154-block  1
unconditional  1 never executed
    $$$$$:  154-block  2
branch  2 never executed
branch  3 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
    $$$$$:  156-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
    $$$$$:  163-block  0
unconditional  0 never executed
    $$$$$:  163-block  1
unconditional  1 never executed
    $$$$$:  163-block  2
branch  2 never executed
branch  3 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
    $$$$$:  176-block  0
unconditional  0 never executed
    $$$$$:  176-block  1
unconditional  1 never executed
    $$$$$:  176-block  2
branch  2 never executed
branch  3 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    $$$$$:  192-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  192-block  1
branch  2 never executed
branch  3 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
    $$$$$:  193-block  0
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
    $$$$$:  196-block  0
call    0 never executed
        -:  197:
    #####:  198:  return 0;
unconditional  0 never executed
        -:  199:}
        -:  200:
function shuffle called 12783 returned 100% blocks executed 100%
    12783:  201:int shuffle(int player, struct gameState *state) {
    12783:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    12783:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    12783:  209:  if (state->deckCount[player] < 1)
    12783:  209-block  0
branch  0 taken 8577 (fallthrough)
branch  1 taken 4206
     8577:  210:    return -1;
     8577:  210-block  0
unconditional  0 taken 8577
     4206:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
     4206:  211-block  0
call    0 returned 4206
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1052873:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 4206
  1052873:  214-block  0
branch  1 taken 1048667
branch  2 taken 4206 (fallthrough)
  1048667:  215:    card = floor(Random() * state->deckCount[player]);
  1048667:  215-block  0
call    0 returned 1048667
  1048667:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1048667:  217:    newDeckPos++;
 88070571:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 1048667
 87021904:  218-block  0
unconditional  1 taken 87021904
 88070571:  218-block  1
branch  2 taken 87021904
branch  3 taken 1048667 (fallthrough)
 87021904:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1048667:  221:    state->deckCount[player]--;
  1048667:  221-block  0
unconditional  0 taken 1048667
        -:  222:  }
  1052873:  223:  for (i = 0; i < newDeckPos; i++) {
     4206:  223-block  0
unconditional  0 taken 4206
  1048667:  223-block  1
unconditional  1 taken 1048667
  1052873:  223-block  2
branch  2 taken 1048667
branch  3 taken 4206 (fallthrough)
  1048667:  224:    state->deck[player][i] = newDeck[i];
  1048667:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    12783:  228:  return 0;
     4206:  228-block  0
unconditional  0 taken 4206
    12783:  228-block  1
unconditional  1 taken 12783
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  272-block  0
    $$$$$:  272-block  1
unconditional  0 never executed
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    $$$$$:  282-block  0
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    $$$$$:  285-block  0
unconditional  0 never executed
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  286-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    $$$$$:  289-block  0
unconditional  0 never executed
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  297-block  0
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
unconditional  0 never executed
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    $$$$$:  308-block  0
unconditional  0 never executed
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    $$$$$:  320-block  0
    #####:  321:  return state->supplyCount[card];
    $$$$$:  321-block  0
unconditional  0 never executed
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    $$$$$:  346-block  0
    #####:  347:  return state->whoseTurn;
    $$$$$:  347-block  0
unconditional  0 never executed
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
unconditional  1 never executed
    $$$$$:  402-block  2
branch  2 never executed
branch  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 2099466 returned 100% blocks executed 100%
  2099466:  525:int drawCard(int player, struct gameState *state)
  2099466:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
  2099466:  528:  if (state->deckCount[player] <= 0){//Deck is empty
  2099466:  528-block  0
branch  0 taken 6553 (fallthrough)
branch  1 taken 2092913
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1055220:  533:    for (i = 0; i < state->discardCount[player];i++){
     6553:  533-block  0
unconditional  0 taken 6553
  1048667:  533-block  1
unconditional  1 taken 1048667
  1055220:  533-block  2
branch  2 taken 1048667
branch  3 taken 6553 (fallthrough)
  1048667:  534:      state->deck[player][i] = state->discard[player][i];
  1048667:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6553:  538:    state->deckCount[player] = state->discardCount[player];
     6553:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6553:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     6553:  542-block  0
call    0 returned 6553
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6553:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6553:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 6553
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6553:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6553:  559:    if (deckCounter == 0)
     6553:  559-block  0
branch  0 taken 2347 (fallthrough)
branch  1 taken 4206
     2347:  560:      return -1;
     2347:  560-block  0
unconditional  0 taken 2347
        -:  561:
     4206:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     4206:  563:    state->deckCount[player]--;
     4206:  564:    state->handCount[player]++;//Increment hand count
     4206:  564-block  0
unconditional  0 taken 4206
        -:  565:  }
        -:  566:
        -:  567:  else{
  2092913:  568:    int count = state->handCount[player];//Get current hand count for player
  2092913:  568-block  0
unconditional  0 taken 2092913
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  2092913:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2092913:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2092913:  576:    state->deckCount[player]--;
  2092913:  577:    state->handCount[player]++;//Increment hand count
  2092913:  577-block  0
unconditional  0 taken 2092913
        -:  578:  }
        -:  579:
  2097119:  580:  return 0;
  2097119:  580-block  0
unconditional  0 taken 2097119
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
    $$$$$:  583-block  0
        -:  584:{
    #####:  585:  switch( cardNumber ) 
    $$$$$:  585-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case estate:
    #####:  590:      return 2;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case duchy:
    #####:  592:      return 5;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case province:
    #####:  594:      return 8;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case copper:
    #####:  596:      return 0;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case silver:
    #####:  598:      return 3;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case gold:
    #####:  600:      return 6;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case adventurer:
    #####:  602:      return 6;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
    #####:  614:      return 4;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    $$$$$:  646-block  0
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    $$$$$:  653-block  0
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        -:  660:  int result;
    #####:  661:  int z = 0;// this is the counter for the temp hand
    #####:  662:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  663:    nextPlayer = 0;
    $$$$$:  663-block  0
unconditional  0 never executed
        -:  664:  }
        -:  665:  
        -:  666:  //refactored call for adventurer card
    #####:  667:  if (card == adventurer){
    $$$$$:  667-block  0
branch  0 never executed
branch  1 never executed
    #####:  668:    result = callAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
    $$$$$:  668-block  0
call    0 never executed
        -:  669:
    #####:  670:    return result;
unconditional  0 never executed
        -:  671:  }
        -:  672:
        -:  673:  //refactored call for smithy card
    #####:  674:  else if (card == smithy){
    $$$$$:  674-block  0
branch  0 never executed
branch  1 never executed
    #####:  675:    result = callSmithy(currentPlayer, state, handPos);
    $$$$$:  675-block  0
call    0 never executed
        -:  676:
    #####:  677:    return result;
unconditional  0 never executed
        -:  678:  } 
        -:  679:
        -:  680:  //refactored call for village card
    #####:  681:  else if (card == village){
    $$$$$:  681-block  0
branch  0 never executed
branch  1 never executed
    #####:  682:    result = callVillage(currentPlayer, state, handPos);
    $$$$$:  682-block  0
call    0 never executed
        -:  683:
    #####:  684:    return result;
unconditional  0 never executed
        -:  685:  }  
        -:  686:
        -:  687:  //refactored call for great_hall card
    #####:  688:  else if (card == great_hall){
    $$$$$:  688-block  0
branch  0 never executed
branch  1 never executed
    #####:  689:    result = callGreatHall(currentPlayer, state, handPos);
    $$$$$:  689-block  0
call    0 never executed
        -:  690:
    #####:  691:    return result;
unconditional  0 never executed
        -:  692:  }
        -:  693:
        -:  694:  //refactored call for outpost card
    #####:  695:  else if (card == outpost){
    $$$$$:  695-block  0
branch  0 never executed
branch  1 never executed
    #####:  696:    result = callOutpost(currentPlayer, state, handPos);
    $$$$$:  696-block  0
call    0 never executed
        -:  697:
    #####:  698:    return result;
unconditional  0 never executed
        -:  699:  }         
        -:  700:
        -:  701:  //uses switch to select card and perform actions
    #####:  702:  switch( card ) 
    $$$$$:  702-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  703:    {
        -:  704:
        -:  705:    case council_room:
        -:  706:      //+4 Cards
    #####:  707:      for (i = 0; i < 4; i++)
    $$$$$:  707-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  707-block  1
branch  2 never executed
branch  3 never executed
        -:  708:	{
    #####:  709:	  drawCard(currentPlayer, state);
    $$$$$:  709-block  0
call    0 never executed
        -:  710:	}
        -:  711:			
        -:  712:      //+1 Buy
    #####:  713:      state->numBuys++;
        -:  714:			
        -:  715:      //Each other player draws a card
    #####:  716:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  716-block  0
unconditional  0 never executed
    $$$$$:  716-block  1
unconditional  1 never executed
    $$$$$:  716-block  2
branch  2 never executed
branch  3 never executed
        -:  717:	{
    #####:  718:	  if ( i != currentPlayer )
    $$$$$:  718-block  0
branch  0 never executed
branch  1 never executed
        -:  719:	    {
    #####:  720:	      drawCard(i, state);
    $$$$$:  720-block  0
call    0 never executed
unconditional  1 never executed
        -:  721:	    }
        -:  722:	}
        -:  723:			
        -:  724:      //put played card in played card pile
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  725-block  0
call    0 never executed
        -:  726:			
    #####:  727:      return 0;
unconditional  0 never executed
        -:  728:			
        -:  729:    case feast:
        -:  730:      //gain card with cost up to 5
        -:  731:      //Backup hand
    #####:  732:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  732-block  0
unconditional  0 never executed
    $$$$$:  732-block  1
unconditional  1 never executed
    $$$$$:  732-block  2
branch  2 never executed
branch  3 never executed
    #####:  733:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  734:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  735:      }
        -:  736:      //Backup hand
        -:  737:
        -:  738:      //Update Coins for Buy
    #####:  739:      updateCoins(currentPlayer, state, 5);
    $$$$$:  739-block  0
call    0 never executed
    #####:  740:      x = 1;//Condition to loop on
    #####:  741:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  741-block  0
branch  1 never executed
branch  2 never executed
    #####:  742:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  742-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  743:	  if (DEBUG)
        -:  744:	    printf("None of that card left, sorry!\n");
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  748:	  }
        -:  749:	}
    #####:  750:	else if (state->coins < getCost(choice1)){
    $$$$$:  750-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  751:	  printf("That card is too expensive!\n");
    $$$$$:  751-block  0
call    0 never executed
unconditional  1 never executed
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  755:	  }
        -:  756:	}
        -:  757:	else{
        -:  758:
        -:  759:	  if (DEBUG){
        -:  760:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  761:	  }
        -:  762:
    #####:  763:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  763-block  0
call    0 never executed
    #####:  764:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  765:
        -:  766:	  if (DEBUG){
        -:  767:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  768:	  }
        -:  769:
        -:  770:	}
        -:  771:      }     
        -:  772:
        -:  773:      //Reset Hand
    #####:  774:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  774-block  0
unconditional  0 never executed
    $$$$$:  774-block  1
unconditional  1 never executed
    $$$$$:  774-block  2
branch  2 never executed
branch  3 never executed
    #####:  775:	state->hand[currentPlayer][i] = temphand[i];
    #####:  776:	temphand[i] = -1;
        -:  777:      }
        -:  778:      //Reset Hand
        -:  779:      			
    #####:  780:      return 0;
    $$$$$:  780-block  0
unconditional  0 never executed
        -:  781:			
        -:  782:    case gardens:
    #####:  783:      return -1;
    $$$$$:  783-block  0
unconditional  0 never executed
        -:  784:			
        -:  785:    case mine:
    #####:  786:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  787:
    #####:  788:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  788-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  788-block  1
branch  2 never executed
branch  3 never executed
        -:  789:	{
    #####:  790:	  return -1;
    $$$$$:  790-block  0
unconditional  0 never executed
        -:  791:	}
        -:  792:		
    #####:  793:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  793-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  793-block  1
branch  2 never executed
branch  3 never executed
        -:  794:	{
    #####:  795:	  return -1;
    $$$$$:  795-block  0
unconditional  0 never executed
        -:  796:	}
        -:  797:
    #####:  798:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  798-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  799:	{
    #####:  800:	  return -1;
    $$$$$:  800-block  0
unconditional  0 never executed
        -:  801:	}
        -:  802:
    #####:  803:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  803-block  0
call    0 never executed
        -:  804:
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  807:
        -:  808:      //discard trashed card
    #####:  809:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  809-block  0
unconditional  1 never executed
    $$$$$:  809-block  1
branch  2 never executed
branch  3 never executed
        -:  810:	{
    #####:  811:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  811-block  0
branch  0 never executed
branch  1 never executed
        -:  812:	    {
    #####:  813:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  813-block  0
call    0 never executed
    #####:  814:	      break;
unconditional  0 never executed
        -:  815:	    }
        -:  816:	}
        -:  817:			
    #####:  818:      return 0;
    $$$$$:  818-block  0
unconditional  0 never executed
        -:  819:			
        -:  820:    case remodel:
    #####:  821:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  822:
    #####:  823:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  823-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  824:	{
    #####:  825:	  return -1;
    $$$$$:  825-block  0
unconditional  0 never executed
        -:  826:	}
        -:  827:
    #####:  828:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  828-block  0
call    0 never executed
        -:  829:
        -:  830:      //discard card from hand
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  832:
        -:  833:      //discard trashed card
    #####:  834:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  834-block  0
unconditional  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  836-block  0
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  838-block  0
call    0 never executed
    #####:  839:	      break;
unconditional  0 never executed
        -:  840:	    }
        -:  841:	}
        -:  842:
        -:  843:
    #####:  844:      return 0;
    $$$$$:  844-block  0
unconditional  0 never executed
        -:  845:		
        -:  846:    case baron:
    #####:  847:      state->numBuys++;//Increase buys by 1!
    #####:  848:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  848-block  0
branch  0 never executed
branch  1 never executed
    #####:  849:	int p = 0;//Iterator for hand!
    #####:  850:	int card_not_discarded = 1;//Flag for discard set!
    #####:  851:	while(card_not_discarded){
    $$$$$:  851-block  0
unconditional  0 never executed
    $$$$$:  851-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  851-block  2
unconditional  3 never executed
    #####:  852:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  852-block  0
branch  0 never executed
branch  1 never executed
    #####:  853:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  854:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  855:	    state->discardCount[currentPlayer]++;
    #####:  856:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  856-block  0
unconditional  0 never executed
    $$$$$:  856-block  1
unconditional  1 never executed
    $$$$$:  856-block  2
branch  2 never executed
branch  3 never executed
    #####:  857:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  858:	    }
    #####:  859:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  860:	    state->handCount[currentPlayer]--;
    #####:  861:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  861-block  0
unconditional  0 never executed
        -:  862:	  }
    #####:  863:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  863-block  0
branch  0 never executed
branch  1 never executed
        -:  864:	    if(DEBUG) {
        -:  865:	      printf("No estate cards in your hand, invalid choice\n");
        -:  866:	      printf("Must gain an estate if there are any\n");
        -:  867:	    }
    #####:  868:	    if (supplyCount(estate, state) > 0){
    $$$$$:  868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  869:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  869-block  0
call    0 never executed
    #####:  870:	      state->supplyCount[estate]--;//Decrement estates
    #####:  871:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  872:		isGameOver(state);
    $$$$$:  872-block  0
call    0 never executed
unconditional  1 never executed
        -:  873:	      }
        -:  874:	    }
    #####:  875:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  875-block  0
unconditional  0 never executed
        -:  876:	  }
        -:  877:			    
        -:  878:	  else{
    #####:  879:	    p++;//Next card
    $$$$$:  879-block  0
unconditional  0 never executed
        -:  880:	  }
        -:  881:	}
        -:  882:      }
        -:  883:			    
        -:  884:      else{
    #####:  885:	if (supplyCount(estate, state) > 0){
    $$$$$:  885-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  886:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  886-block  0
call    0 never executed
    #####:  887:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  888:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  889:	    isGameOver(state);
    $$$$$:  889-block  0
call    0 never executed
unconditional  1 never executed
        -:  890:	  }
        -:  891:	}
        -:  892:      }
        -:  893:	    
        -:  894:      
    #####:  895:      return 0;
    $$$$$:  895-block  0
unconditional  0 never executed
        -:  896:		
        -:  897:    case minion:
        -:  898:      //+1 action
    #####:  899:      state->numActions++;
        -:  900:			
        -:  901:      //discard card from hand
    #####:  902:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  902-block  0
call    0 never executed
        -:  903:			
    #####:  904:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  905:	{
    #####:  906:	  state->coins = state->coins + 2;
    $$$$$:  906-block  0
unconditional  0 never executed
        -:  907:	}
        -:  908:			
    #####:  909:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  909-block  0
branch  0 never executed
branch  1 never executed
        -:  910:	{
        -:  911:	  //discard hand
    #####:  912:	  while(numHandCards(state) > 0)
    $$$$$:  912-block  0
unconditional  0 never executed
    $$$$$:  912-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:	    {
    #####:  914:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  914-block  0
call    0 never executed
unconditional  1 never executed
        -:  915:	    }
        -:  916:				
        -:  917:	  //draw 4
    #####:  918:	  for (i = 0; i < 4; i++)
    $$$$$:  918-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  918-block  1
branch  2 never executed
branch  3 never executed
        -:  919:	    {
    #####:  920:	      drawCard(currentPlayer, state);
    $$$$$:  920-block  0
call    0 never executed
        -:  921:	    }
        -:  922:				
        -:  923:	  //other players discard hand and redraw if hand size > 4
    #####:  924:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  924-block  0
unconditional  0 never executed
    $$$$$:  924-block  1
unconditional  1 never executed
    $$$$$:  924-block  2
branch  2 never executed
branch  3 never executed
        -:  925:	    {
    #####:  926:	      if (i != currentPlayer)
    $$$$$:  926-block  0
branch  0 never executed
branch  1 never executed
        -:  927:		{
    #####:  928:		  if ( state->handCount[i] > 4 )
    $$$$$:  928-block  0
branch  0 never executed
branch  1 never executed
        -:  929:		    {
        -:  930:		      //discard hand
    #####:  931:		      while( state->handCount[i] > 0 )
    $$$$$:  931-block  0
unconditional  0 never executed
    $$$$$:  931-block  1
branch  1 never executed
branch  2 never executed
        -:  932:			{
    #####:  933:			  discardCard(handPos, i, state, 0);
    $$$$$:  933-block  0
call    0 never executed
unconditional  1 never executed
        -:  934:			}
        -:  935:							
        -:  936:		      //draw 4
    #####:  937:		      for (j = 0; j < 4; j++)
    $$$$$:  937-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  937-block  1
branch  2 never executed
branch  3 never executed
        -:  938:			{
    #####:  939:			  drawCard(i, state);
    $$$$$:  939-block  0
call    0 never executed
        -:  940:			}
        -:  941:		    }
        -:  942:		}
        -:  943:	    }
        -:  944:				
        -:  945:	}
    #####:  946:      return 0;
    $$$$$:  946-block  0
unconditional  0 never executed
        -:  947:		
        -:  948:    case steward:
    #####:  949:      if (choice1 == 1)
    $$$$$:  949-block  0
branch  0 never executed
branch  1 never executed
        -:  950:	{
        -:  951:	  //+2 cards
    #####:  952:	  drawCard(currentPlayer, state);
    $$$$$:  952-block  0
call    0 never executed
    #####:  953:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -:  954:	}
    #####:  955:      else if (choice1 == 2)
    $$$$$:  955-block  0
branch  0 never executed
branch  1 never executed
        -:  956:	{
        -:  957:	  //+2 coins
    #####:  958:	  state->coins = state->coins + 2;
    $$$$$:  958-block  0
unconditional  0 never executed
        -:  959:	}
        -:  960:      else
        -:  961:	{
        -:  962:	  //trash 2 cards in hand
    #####:  963:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$:  963-block  0
call    0 never executed
    #####:  964:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -:  965:	}
        -:  966:			
        -:  967:      //discard card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  968-block  0
call    0 never executed
    #####:  969:      return 0;
unconditional  0 never executed
        -:  970:		
        -:  971:    case tribute:
    #####:  972:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  972-block  0
branch  0 never executed
branch  1 never executed
    #####:  973:	if (state->deckCount[nextPlayer] > 0){
    $$$$$:  973-block  0
branch  0 never executed
branch  1 never executed
    #####:  974:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  975:	  state->deckCount[nextPlayer]--;
    $$$$$:  975-block  0
unconditional  0 never executed
        -:  976:	}
    #####:  977:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  977-block  0
branch  0 never executed
branch  1 never executed
    #####:  978:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  979:	  state->discardCount[nextPlayer]--;
    $$$$$:  979-block  0
unconditional  0 never executed
        -:  980:	}
        -:  981:	else{
        -:  982:	  //No Card to Reveal
        -:  983:	  if (DEBUG){
        -:  984:	    printf("No cards to reveal\n");
        -:  985:	  }
        -:  986:	}
        -:  987:      }
        -:  988:	    
        -:  989:      else{
    #####:  990:	if (state->deckCount[nextPlayer] == 0){
    $$$$$:  990-block  0
branch  0 never executed
branch  1 never executed
    #####:  991:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  991-block  0
unconditional  0 never executed
    $$$$$:  991-block  1
unconditional  1 never executed
    $$$$$:  991-block  2
branch  2 never executed
branch  3 never executed
    #####:  992:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  993:	    state->deckCount[nextPlayer]++;
    #####:  994:	    state->discard[nextPlayer][i] = -1;
    #####:  995:	    state->discardCount[nextPlayer]--;
        -:  996:	  }
        -:  997:			    
    #####:  998:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$:  998-block  0
call    0 never executed
unconditional  1 never executed
        -:  999:	} 
    #####: 1000:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1001:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1002:	state->deckCount[nextPlayer]--;
    #####: 1003:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1004:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1005:	state->deckCount[nextPlayer]--;
    $$$$$: 1005-block  0
unconditional  0 never executed
        -: 1006:      }    
        -: 1007:		       
    #####: 1008:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1008-block  0
branch  0 never executed
branch  1 never executed
    #####: 1009:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1010:	state->playedCardCount++;
    #####: 1011:	tributeRevealedCards[1] = -1;
    $$$$$: 1011-block  0
unconditional  0 never executed
        -: 1012:      }
        -: 1013:
    #####: 1014:      for (i = 0; i <= 2; i ++){
    $$$$$: 1014-block  0
unconditional  0 never executed
    $$$$$: 1014-block  1
unconditional  1 never executed
    $$$$$: 1014-block  2
branch  2 never executed
branch  3 never executed
    #####: 1015:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1015-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1015-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1015-block  2
branch  4 never executed
branch  5 never executed
    #####: 1016:	  state->coins += 2;
    $$$$$: 1016-block  0
unconditional  0 never executed
        -: 1017:	}
        -: 1018:		    
    #####: 1019:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1019-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1019-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1019-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1019-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1019-block  4
branch  8 never executed
branch  9 never executed
    #####: 1020:	  drawCard(currentPlayer, state);
    $$$$$: 1020-block  0
call    0 never executed
    #####: 1021:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1022:	}
        -: 1023:	else{//Action Card
    #####: 1024:	  state->numActions = state->numActions + 2;
    $$$$$: 1024-block  0
unconditional  0 never executed
        -: 1025:	}
        -: 1026:      }
        -: 1027:	    
    #####: 1028:      return 0;
    $$$$$: 1028-block  0
unconditional  0 never executed
        -: 1029:		
        -: 1030:    case ambassador:
    #####: 1031:      j = 0;		//used to check if player has enough cards to discard
        -: 1032:
    #####: 1033:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1033-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1033-block  1
branch  2 never executed
branch  3 never executed
        -: 1034:	{
    #####: 1035:	  return -1;				
    $$$$$: 1035-block  0
unconditional  0 never executed
        -: 1036:	}
        -: 1037:
    #####: 1038:      if (choice1 == handPos)
    $$$$$: 1038-block  0
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  return -1;
    $$$$$: 1040-block  0
unconditional  0 never executed
        -: 1041:	}
        -: 1042:
    #####: 1043:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1043-block  0
unconditional  0 never executed
    $$$$$: 1043-block  1
unconditional  1 never executed
    $$$$$: 1043-block  2
branch  2 never executed
branch  3 never executed
        -: 1044:	{
    #####: 1045:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1045-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1045-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1045-block  2
branch  4 never executed
branch  5 never executed
        -: 1046:	    {
    #####: 1047:	      j++;
    $$$$$: 1047-block  0
unconditional  0 never executed
        -: 1048:	    }
        -: 1049:	}
    #####: 1050:      if (j < choice2)
    $$$$$: 1050-block  0
branch  0 never executed
branch  1 never executed
        -: 1051:	{
    #####: 1052:	  return -1;				
    $$$$$: 1052-block  0
unconditional  0 never executed
        -: 1053:	}
        -: 1054:
        -: 1055:      if (DEBUG) 
        -: 1056:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1057:
        -: 1058:      //increase supply count for choosen card by amount being discarded
    #####: 1059:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1060:			
        -: 1061:      //each other player gains a copy of revealed card
    #####: 1062:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1062-block  0
unconditional  0 never executed
    $$$$$: 1062-block  1
unconditional  1 never executed
    $$$$$: 1062-block  2
branch  2 never executed
branch  3 never executed
        -: 1063:	{
    #####: 1064:	  if (i != currentPlayer)
    $$$$$: 1064-block  0
branch  0 never executed
branch  1 never executed
        -: 1065:	    {
    #####: 1066:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1066-block  0
call    0 never executed
unconditional  1 never executed
        -: 1067:	    }
        -: 1068:	}
        -: 1069:
        -: 1070:      //discard played card from hand
    #####: 1071:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1071-block  0
call    0 never executed
        -: 1072:
        -: 1073:      //trash copies of cards returned to supply
    #####: 1074:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1074-block  0
unconditional  1 never executed
    $$$$$: 1074-block  1
branch  2 never executed
branch  3 never executed
        -: 1075:	{
    #####: 1076:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1076-block  0
unconditional  0 never executed
    $$$$$: 1076-block  1
unconditional  1 never executed
    $$$$$: 1076-block  2
branch  2 never executed
branch  3 never executed
        -: 1077:	    {
    #####: 1078:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1078-block  0
branch  0 never executed
branch  1 never executed
        -: 1079:		{
    #####: 1080:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1080-block  0
call    0 never executed
    #####: 1081:		  break;
unconditional  0 never executed
        -: 1082:		}
        -: 1083:	    }
        -: 1084:	}			
        -: 1085:
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
unconditional  0 never executed
        -: 1087:		
        -: 1088:    case cutpurse:
        -: 1089:
    #####: 1090:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1090-block  0
call    0 never executed
    #####: 1091:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1091-block  0
unconditional  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  if (i != currentPlayer)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
        -: 1094:	    {
    #####: 1095:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1095-block  0
unconditional  0 never executed
    $$$$$: 1095-block  1
unconditional  1 never executed
    $$$$$: 1095-block  2
branch  2 never executed
branch  3 never executed
        -: 1096:		{
    #####: 1097:		  if (state->hand[i][j] == copper)
    $$$$$: 1097-block  0
branch  0 never executed
branch  1 never executed
        -: 1098:		    {
    #####: 1099:		      discardCard(j, i, state, 0);
    $$$$$: 1099-block  0
call    0 never executed
    #####: 1100:		      break;
unconditional  0 never executed
        -: 1101:		    }
    #####: 1102:		  if (j == state->handCount[i])
    $$$$$: 1102-block  0
branch  0 never executed
branch  1 never executed
        -: 1103:		    {
    #####: 1104:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1104-block  0
unconditional  0 never executed
    $$$$$: 1104-block  1
unconditional  1 never executed
    $$$$$: 1104-block  2
branch  2 never executed
branch  3 never executed
        -: 1105:			{
        -: 1106:			  if (DEBUG)
        -: 1107:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1108:			}	
    #####: 1109:		      break;
    $$$$$: 1109-block  0
unconditional  0 never executed
        -: 1110:		    }		
        -: 1111:		}
        -: 1112:					
        -: 1113:	    }
        -: 1114:				
        -: 1115:	}				
        -: 1116:
        -: 1117:      //discard played card from hand
    #####: 1118:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1118-block  0
call    0 never executed
        -: 1119:
    #####: 1120:      return 0;
unconditional  0 never executed
        -: 1121:
        -: 1122:		
        -: 1123:    case embargo: 
        -: 1124:      //+2 Coins
    #####: 1125:      state->coins = state->coins + 2;
        -: 1126:			
        -: 1127:      //see if selected pile is in play
    #####: 1128:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1128-block  0
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;
    $$$$$: 1130-block  0
unconditional  0 never executed
        -: 1131:	}
        -: 1132:			
        -: 1133:      //add embargo token to selected supply pile
    #####: 1134:      state->embargoTokens[choice1]++;
        -: 1135:			
        -: 1136:      //trash card
    #####: 1137:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1137-block  0
call    0 never executed
    #####: 1138:      return 0;
unconditional  0 never executed
        -: 1139:		
        -: 1140:    /*case outpost:
        -: 1141:      //set outpost flag
        -: 1142:      state->outpostPlayed++;
        -: 1143:			
        -: 1144:      //discard card
        -: 1145:      discardCard(handPos, currentPlayer, state, 0);
        -: 1146:      return 0;*/
        -: 1147:		
        -: 1148:    case salvager:
        -: 1149:      //+1 buy
    #####: 1150:      state->numBuys++;
        -: 1151:			
    #####: 1152:      if (choice1)
    $$$$$: 1152-block  0
branch  0 never executed
branch  1 never executed
        -: 1153:	{
        -: 1154:	  //gain coins equal to trashed card
    #####: 1155:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1155-block  0
call    0 never executed
call    1 never executed
        -: 1156:	  //trash card
    #####: 1157:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1158:	}
        -: 1159:			
        -: 1160:      //discard card
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1161-block  0
call    0 never executed
    #####: 1162:      return 0;
unconditional  0 never executed
        -: 1163:		
        -: 1164:    case sea_hag:
    #####: 1165:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1165-block  0
unconditional  0 never executed
    $$$$$: 1165-block  1
unconditional  1 never executed
    $$$$$: 1165-block  2
branch  2 never executed
branch  3 never executed
    #####: 1166:	if (i != currentPlayer){
    $$$$$: 1166-block  0
branch  0 never executed
branch  1 never executed
    #####: 1167:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1168:	  state->discardCount[i]++;
    #####: 1169:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1169-block  0
unconditional  0 never executed
        -: 1170:	}
        -: 1171:      }
    #####: 1172:      return 0;
    $$$$$: 1172-block  0
unconditional  0 never executed
        -: 1173:		
        -: 1174:    case treasure_map:
        -: 1175:      //search hand for another treasure_map
    #####: 1176:      index = -1;
    #####: 1177:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1177-block  0
unconditional  0 never executed
    $$$$$: 1177-block  1
unconditional  1 never executed
    $$$$$: 1177-block  2
branch  2 never executed
branch  3 never executed
        -: 1178:	{
    #####: 1179:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1179-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1179-block  1
branch  2 never executed
branch  3 never executed
        -: 1180:	    {
    #####: 1181:	      index = i;
    #####: 1182:	      break;
    $$$$$: 1182-block  0
unconditional  0 never executed
        -: 1183:	    }
        -: 1184:	}
    #####: 1185:      if (index > -1)
    $$$$$: 1185-block  0
branch  0 never executed
branch  1 never executed
        -: 1186:	{
        -: 1187:	  //trash both treasure cards
    #####: 1188:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1188-block  0
call    0 never executed
    #####: 1189:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1190:
        -: 1191:	  //gain 4 Gold cards
    #####: 1192:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1192-block  0
branch  2 never executed
branch  3 never executed
        -: 1193:	    {
    #####: 1194:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1194-block  0
call    0 never executed
        -: 1195:	    }
        -: 1196:				
        -: 1197:	  //return success
    #####: 1198:	  return 1;
    $$$$$: 1198-block  0
unconditional  0 never executed
        -: 1199:	}
        -: 1200:			
        -: 1201:      //no second treasure_map found in hand
    #####: 1202:      return -1;
    $$$$$: 1202-block  0
unconditional  0 never executed
        -: 1203:    }
        -: 1204:	
    #####: 1205:  return -1;
    $$$$$: 1205-block  0
unconditional  0 never executed
    $$$$$: 1205-block  1
unconditional  1 never executed
        -: 1206:}
        -: 1207:
function discardCard called 100000 returned 100% blocks executed 89%
   100000: 1208:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
   100000: 1208-block  0
        -: 1209:{
        -: 1210:	
        -: 1211:  //if card is not trashed, added to Played pile 
   100000: 1212:  if (trashFlag < 1)
   100000: 1212-block  0
branch  0 taken 100000 (fallthrough)
branch  1 taken 0
        -: 1213:    {
        -: 1214:      //add card to played pile
   100000: 1215:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   100000: 1216:      state->playedCardCount++;
   100000: 1216-block  0
unconditional  0 taken 100000
        -: 1217:    }
        -: 1218:	
        -: 1219:  //set played card to -1
   100000: 1220:  state->hand[currentPlayer][handPos] = -1;
        -: 1221:	
        -: 1222:  //remove card from player's hand
   100000: 1223:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
   100000: 1223-block  0
branch  0 taken 90 (fallthrough)
branch  1 taken 99910
        -: 1224:    {
        -: 1225:      //reduce number of cards in hand
       90: 1226:      state->handCount[currentPlayer]--;
       90: 1226-block  0
unconditional  0 taken 90
        -: 1227:    }
    99910: 1228:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    99910: 1228-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 99910
        -: 1229:    {
        -: 1230:      //reduce number of cards in hand
    #####: 1231:      state->handCount[currentPlayer]--;
    $$$$$: 1231-block  0
unconditional  0 never executed
        -: 1232:    }
        -: 1233:  else 	
        -: 1234:    {
        -: 1235:      //replace discarded card with last card in hand
    99910: 1236:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1237:      //set last card to -1
    99910: 1238:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1239:      //reduce number of cards in hand
    99910: 1240:      state->handCount[currentPlayer]--;
    99910: 1240-block  0
unconditional  0 taken 99910
        -: 1241:    }
        -: 1242:	
   100000: 1243:  return 0;
   100000: 1243-block  0
unconditional  0 taken 100000
        -: 1244:}
        -: 1245:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1246:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1246-block  0
        -: 1247:{
        -: 1248:  //Note: supplyPos is enum of choosen card
        -: 1249:	
        -: 1250:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1251:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1251-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1252:    {
    #####: 1253:      return -1;
    $$$$$: 1253-block  0
unconditional  0 never executed
        -: 1254:    }
        -: 1255:	
        -: 1256:  //added card for [whoseTurn] current player:
        -: 1257:  // toFlag = 0 : add to discard
        -: 1258:  // toFlag = 1 : add to deck
        -: 1259:  // toFlag = 2 : add to hand
        -: 1260:
    #####: 1261:  if (toFlag == 1)
    $$$$$: 1261-block  0
branch  0 never executed
branch  1 never executed
        -: 1262:    {
    #####: 1263:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1264:      state->deckCount[player]++;
    $$$$$: 1264-block  0
unconditional  0 never executed
        -: 1265:    }
    #####: 1266:  else if (toFlag == 2)
    $$$$$: 1266-block  0
branch  0 never executed
branch  1 never executed
        -: 1267:    {
    #####: 1268:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1269:      state->handCount[player]++;
    $$$$$: 1269-block  0
unconditional  0 never executed
        -: 1270:    }
        -: 1271:  else
        -: 1272:    {
    #####: 1273:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1274:      state->discardCount[player]++;
    $$$$$: 1274-block  0
unconditional  0 never executed
        -: 1275:    }
        -: 1276:	
        -: 1277:  //decrease number in supply pile
    #####: 1278:  state->supplyCount[supplyPos]--;
        -: 1279:	 
    #####: 1280:  return 0;
    $$$$$: 1280-block  0
unconditional  0 never executed
        -: 1281:}
        -: 1282:
function updateCoins called 0 returned 0% blocks executed 0%
    #####: 1283:int updateCoins(int player, struct gameState *state, int bonus)
    $$$$$: 1283-block  0
        -: 1284:{
        -: 1285:  int i;
        -: 1286:	
        -: 1287:  //reset coin count
    #####: 1288:  state->coins = 0;
        -: 1289:
        -: 1290:  //add coins for each Treasure card in player's hand
    #####: 1291:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$: 1291-block  0
unconditional  0 never executed
    $$$$$: 1291-block  1
unconditional  1 never executed
    $$$$$: 1291-block  2
branch  2 never executed
branch  3 never executed
        -: 1292:    {
    #####: 1293:      if (state->hand[player][i] == copper)
    $$$$$: 1293-block  0
branch  0 never executed
branch  1 never executed
        -: 1294:	{
    #####: 1295:	  state->coins += 1;
    $$$$$: 1295-block  0
unconditional  0 never executed
        -: 1296:	}
    #####: 1297:      else if (state->hand[player][i] == silver)
    $$$$$: 1297-block  0
branch  0 never executed
branch  1 never executed
        -: 1298:	{
    #####: 1299:	  state->coins += 2;
    $$$$$: 1299-block  0
unconditional  0 never executed
        -: 1300:	}
    #####: 1301:      else if (state->hand[player][i] == gold)
    $$$$$: 1301-block  0
branch  0 never executed
branch  1 never executed
        -: 1302:	{
    #####: 1303:	  state->coins += 3;
    $$$$$: 1303-block  0
unconditional  0 never executed
        -: 1304:	}	
        -: 1305:    }	
        -: 1306:
        -: 1307:  //add bonus
    #####: 1308:  state->coins += bonus;
        -: 1309:
    #####: 1310:  return 0;
    $$$$$: 1310-block  0
unconditional  0 never executed
        -: 1311:}
        -: 1312:
        -: 1313://refactored code for adventurer card
        -: 1314://BUGS = changed while(drawntreasure < 2) to <=
        -: 1315://       changed ||'s to &&'s and =='s to !='s in line 1323
function callAdventurer called 50000 returned 100% blocks executed 100%
    50000: 1316:int callAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand, int z){
    50000: 1316-block  0
        -: 1317:  
  1999466: 1318:  while(drawntreasure<=2){
    50000: 1318-block  0
unconditional  0 taken 50000
  1999466: 1318-block  1
branch  1 taken 1949466
branch  2 taken 50000 (fallthrough)
  1949466: 1319:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
  1949466: 1319-block  0
branch  0 taken 6230 (fallthrough)
branch  1 taken 1943236
     6230: 1320:    shuffle(currentPlayer, state);
     6230: 1320-block  0
call    0 returned 6230
unconditional  1 taken 6230
        -: 1321:  }
  1949466: 1322:  drawCard(currentPlayer, state);
  1949466: 1322-block  0
call    0 returned 1949466
  1949466: 1323:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1949466: 1324:  if (cardDrawn != copper && cardDrawn == silver && cardDrawn != gold){
branch  0 taken 1799705 (fallthrough)
branch  1 taken 149761
  1799705: 1324-block  0
branch  2 taken 150000 (fallthrough)
branch  3 taken 1649705
   150000: 1324-block  1
branch  4 taken 150000 (fallthrough)
branch  5 taken 0
   150000: 1325:    drawntreasure++;
   150000: 1325-block  0
unconditional  0 taken 150000
        -: 1326:  }
        -: 1327:  else{
  1799466: 1328:    temphand[z]=cardDrawn;
  1799466: 1329:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1799466: 1330:    z++;
  1799466: 1330-block  0
unconditional  0 taken 1799466
        -: 1331:  }
        -: 1332:      }
        -: 1333:
  1849466: 1334:      while(z-1>=0){
    50000: 1334-block  0
unconditional  0 taken 50000
  1849466: 1334-block  1
branch  1 taken 1799466
branch  2 taken 50000 (fallthrough)
  1799466: 1335:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1799466: 1336:  z=z-1;
  1799466: 1336-block  0
unconditional  0 taken 1799466
        -: 1337:      }
        -: 1338:
    50000: 1339:      return 0;
    50000: 1339-block  0
unconditional  0 taken 50000
        -: 1340:}
        -: 1341:
        -: 1342://refactored code for smithy card
        -: 1343://BUG = started i at 1 instead of 0
function callSmithy called 50000 returned 100% blocks executed 100%
    50000: 1344:int callSmithy(int currentPlayer, struct gameState *state, int handPos){
    50000: 1344-block  0
        -: 1345:  //+3 Cards
    50000: 1346:  int i = 0;
   150000: 1347:  for (i = 1; i < 3; i++)
    50000: 1347-block  0
unconditional  0 taken 50000
unconditional  1 taken 100000
   150000: 1347-block  1
branch  2 taken 100000
branch  3 taken 50000 (fallthrough)
        -: 1348:  {
   100000: 1349:    drawCard(currentPlayer, state);
   100000: 1349-block  0
call    0 returned 100000
        -: 1350:  }
        -: 1351:      
        -: 1352:  //discard card from hand
    50000: 1353:  discardCard(handPos, currentPlayer, state, 0);
    50000: 1353-block  0
call    0 returned 50000
    50000: 1354:  return 0;
unconditional  0 taken 50000
        -: 1355:}
        -: 1356:
        -: 1357://refactored code for village card
        -: 1358://BUG = changed to numActions + 4 from numActions + 2
function callVillage called 50000 returned 100% blocks executed 100%
    50000: 1359:int callVillage(int currentPlayer, struct gameState *state, int handPos){
    50000: 1359-block  0
        -: 1360:  //+1 Card
    50000: 1361:  drawCard(currentPlayer, state);
    50000: 1361-block  0
call    0 returned 50000
        -: 1362:  
        -: 1363:  //+2 Actions
    50000: 1364:  state->numActions = state->numActions + 2;
        -: 1365:  
        -: 1366:  //discard played card from hand
    50000: 1367:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 50000
    50000: 1368:  return 0;
unconditional  0 taken 50000
        -: 1369:}
        -: 1370:
        -: 1371://refactored code for great hall card
function callGreatHall called 0 returned 0% blocks executed 0%
    #####: 1372:int callGreatHall(int currentPlayer, struct gameState *state, int handPos){
    $$$$$: 1372-block  0
        -: 1373:  //+1 Card
    #####: 1374:  drawCard(currentPlayer, state);
    $$$$$: 1374-block  0
call    0 never executed
        -: 1375:  
        -: 1376:  //+1 Actions
    #####: 1377:  state->numActions++;
        -: 1378:  
        -: 1379:  //discard card from hand
    #####: 1380:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1381:  return 0;
unconditional  0 never executed
        -: 1382:}
        -: 1383:
        -: 1384://refactored code for outpost
        -: 1385://BUG = decremented outpostPlayed rather than incremented it
function callOutpost called 0 returned 0% blocks executed 0%
    #####: 1386:int callOutpost(int currentPlayer, struct gameState *state, int handPos){
    $$$$$: 1386-block  0
        -: 1387:  //set outpost flag
    #####: 1388:  state->outpostPlayed--;
        -: 1389:  
        -: 1390:  //discard card
    #####: 1391:  discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1391-block  0
call    0 never executed
    #####: 1392:  return 0;
unconditional  0 never executed
        -: 1393:}
        -: 1394:
        -: 1395://printing function to store value of bug
function printGameState called 10 returned 100% blocks executed 100%
       10: 1396:void printGameState(struct gameState *state, int player){
       10: 1396-block  0
        -: 1397:
       10: 1398:  printf("Game state of failed test:\n");
       10: 1398-block  0
call    0 returned 10
       10: 1399:  printf("handCount: %d\n", state->handCount[player]);
call    0 returned 10
       10: 1400:  printf("deckCount: %d\n", state->deckCount[player]);
call    0 returned 10
       10: 1401:  printf("discardCount: %d\n", state->discardCount[player]);
call    0 returned 10
       10: 1402:  printf("playedCardCount: %d\n", state->playedCardCount);
call    0 returned 10
       10: 1403:  printf("numBuys: %d\n", state->numBuys);
call    0 returned 10
       10: 1404:  printf("numActions: %d\n", state->numActions);
call    0 returned 10
       10: 1405:  printf("End of failed test game state.\n\n");
call    0 returned 10
       10: 1406:}
        -: 1407:
        -: 1408://assert function for tests
function assertTrue called 0 returned 0% blocks executed 0%
    #####: 1409:int assertTrue(char* name, int first, int second){
    $$$$$: 1409-block  0
    #####: 1410:  if(first == second){
    $$$$$: 1410-block  0
branch  0 never executed
branch  1 never executed
    #####: 1411:    printf("%s: %d is the same as %d. TEST PASSED!\n", name, first, second);
    $$$$$: 1411-block  0
call    0 never executed
unconditional  1 never executed
        -: 1412:  }
        -: 1413:  else
    #####: 1414:    printf("%s: %d is NOT the same as %d. TEST FAILED!\n", name, first, second);
    $$$$$: 1414-block  0
call    0 never executed
unconditional  1 never executed
        -: 1415:  
    #####: 1416:}
        -: 1417://end of dominion.c
        -: 1418:
